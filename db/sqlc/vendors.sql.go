// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vendors.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createVendor = `-- name: CreateVendor :one
INSERT INTO vendors (id, user_id, biography, profile_picture, active)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, biography, profile_picture, active
`

type CreateVendorParams struct {
	ID             uuid.UUID      `json:"id"`
	UserID         uuid.NullUUID  `json:"user_id"`
	Biography      sql.NullString `json:"biography"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	Active         sql.NullBool   `json:"active"`
}

type CreateVendorRow struct {
	ID             uuid.UUID      `json:"id"`
	UserID         uuid.NullUUID  `json:"user_id"`
	Biography      sql.NullString `json:"biography"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	Active         sql.NullBool   `json:"active"`
}

func (q *Queries) CreateVendor(ctx context.Context, arg CreateVendorParams) (CreateVendorRow, error) {
	row := q.db.QueryRowContext(ctx, createVendor,
		arg.ID,
		arg.UserID,
		arg.Biography,
		arg.ProfilePicture,
		arg.Active,
	)
	var i CreateVendorRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Biography,
		&i.ProfilePicture,
		&i.Active,
	)
	return i, err
}

const deleteVendor = `-- name: DeleteVendor :one
DELETE FROM vendors
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteVendor(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteVendor, id)
	err := row.Scan(&id)
	return id, err
}

const getVendor = `-- name: GetVendor :one
SELECT id, user_id, biography, profile_picture, active
FROM vendors
WHERE id = $1
LIMIT 1
`

type GetVendorRow struct {
	ID             uuid.UUID      `json:"id"`
	UserID         uuid.NullUUID  `json:"user_id"`
	Biography      sql.NullString `json:"biography"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	Active         sql.NullBool   `json:"active"`
}

func (q *Queries) GetVendor(ctx context.Context, id uuid.UUID) (GetVendorRow, error) {
	row := q.db.QueryRowContext(ctx, getVendor, id)
	var i GetVendorRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Biography,
		&i.ProfilePicture,
		&i.Active,
	)
	return i, err
}

const updateVendor = `-- name: UpdateVendor :one
UPDATE vendors
SET biography = $2,
    profile_picture = $3,
    active = $4
WHERE id = $1
RETURNING id, user_id, biography, profile_picture, active
`

type UpdateVendorParams struct {
	ID             uuid.UUID      `json:"id"`
	Biography      sql.NullString `json:"biography"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	Active         sql.NullBool   `json:"active"`
}

type UpdateVendorRow struct {
	ID             uuid.UUID      `json:"id"`
	UserID         uuid.NullUUID  `json:"user_id"`
	Biography      sql.NullString `json:"biography"`
	ProfilePicture sql.NullString `json:"profile_picture"`
	Active         sql.NullBool   `json:"active"`
}

func (q *Queries) UpdateVendor(ctx context.Context, arg UpdateVendorParams) (UpdateVendorRow, error) {
	row := q.db.QueryRowContext(ctx, updateVendor,
		arg.ID,
		arg.Biography,
		arg.ProfilePicture,
		arg.Active,
	)
	var i UpdateVendorRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Biography,
		&i.ProfilePicture,
		&i.Active,
	)
	return i, err
}
