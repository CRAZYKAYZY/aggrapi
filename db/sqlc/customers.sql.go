// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (id, user_id)
VALUES ($1, $2)
RETURNING id, user_id
`

type CreateCustomerParams struct {
	ID     uuid.UUID     `json:"id"`
	UserID uuid.NullUUID `json:"user_id"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.ID, arg.UserID)
	var i Customer
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :one
DELETE FROM customers
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCustomer(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteCustomer, id)
	err := row.Scan(&id)
	return id, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, user_id
FROM customers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET user_id = $2
WHERE id = $1
RETURNING id, user_id
`

type UpdateCustomerParams struct {
	ID     uuid.UUID     `json:"id"`
	UserID uuid.NullUUID `json:"user_id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer, arg.ID, arg.UserID)
	var i Customer
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}
