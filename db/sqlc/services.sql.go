// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: services.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createService = `-- name: CreateService :one
INSERT INTO services (id, vendor_id, name, description, price, duration, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, vendor_id, name, description, price, duration, created_at, updated_at
`

type CreateServiceParams struct {
	ID          uuid.UUID      `json:"id"`
	VendorID    uuid.UUID      `json:"vendor_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       sql.NullString `json:"price"`
	Duration    sql.NullInt64  `json:"duration"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.ID,
		arg.VendorID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Duration,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Duration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteService = `-- name: DeleteService :one
DELETE FROM services
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteService(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteService, id)
	err := row.Scan(&id)
	return id, err
}

const getService = `-- name: GetService :one
SELECT id, vendor_id, name, description, price, duration, created_at, updated_at
FROM services
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, id uuid.UUID) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Duration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateService = `-- name: UpdateService :one
UPDATE services
SET vendor_id = $2,
    name = $3,
    description = $4,
    price = $5,
    duration = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, vendor_id, name, description, price, duration, updated_at
`

type UpdateServiceParams struct {
	ID          uuid.UUID      `json:"id"`
	VendorID    uuid.UUID      `json:"vendor_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       sql.NullString `json:"price"`
	Duration    sql.NullInt64  `json:"duration"`
}

type UpdateServiceRow struct {
	ID          uuid.UUID      `json:"id"`
	VendorID    uuid.UUID      `json:"vendor_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       sql.NullString `json:"price"`
	Duration    sql.NullInt64  `json:"duration"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (UpdateServiceRow, error) {
	row := q.db.QueryRowContext(ctx, updateService,
		arg.ID,
		arg.VendorID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Duration,
	)
	var i UpdateServiceRow
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Duration,
		&i.UpdatedAt,
	)
	return i, err
}
