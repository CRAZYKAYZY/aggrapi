// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: time_slots.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTimeSlot = `-- name: CreateTimeSlot :one
INSERT INTO time_slots (id, vendor_id, start_time, end_time, is_booked, buffer_time)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, vendor_id, start_time, end_time, is_booked, buffer_time
`

type CreateTimeSlotParams struct {
	ID         uuid.UUID     `json:"id"`
	VendorID   uuid.NullUUID `json:"vendor_id"`
	StartTime  sql.NullTime  `json:"start_time"`
	EndTime    sql.NullTime  `json:"end_time"`
	IsBooked   sql.NullBool  `json:"is_booked"`
	BufferTime sql.NullInt64 `json:"buffer_time"`
}

func (q *Queries) CreateTimeSlot(ctx context.Context, arg CreateTimeSlotParams) (TimeSlot, error) {
	row := q.db.QueryRowContext(ctx, createTimeSlot,
		arg.ID,
		arg.VendorID,
		arg.StartTime,
		arg.EndTime,
		arg.IsBooked,
		arg.BufferTime,
	)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.StartTime,
		&i.EndTime,
		&i.IsBooked,
		&i.BufferTime,
	)
	return i, err
}

const deleteTimeSlot = `-- name: DeleteTimeSlot :one
DELETE FROM time_slots
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteTimeSlot(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteTimeSlot, id)
	err := row.Scan(&id)
	return id, err
}

const getTimeSlot = `-- name: GetTimeSlot :one
SELECT id, vendor_id, start_time, end_time, is_booked, buffer_time
FROM time_slots
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTimeSlot(ctx context.Context, id uuid.UUID) (TimeSlot, error) {
	row := q.db.QueryRowContext(ctx, getTimeSlot, id)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.StartTime,
		&i.EndTime,
		&i.IsBooked,
		&i.BufferTime,
	)
	return i, err
}

const updateTimeSlot = `-- name: UpdateTimeSlot :one
UPDATE time_slots
SET vendor_id = $2,
    start_time = $3,
    end_time = $4,
    is_booked = $5,
    buffer_time = $6
WHERE id = $1
RETURNING id, vendor_id, start_time, end_time, is_booked, buffer_time
`

type UpdateTimeSlotParams struct {
	ID         uuid.UUID     `json:"id"`
	VendorID   uuid.NullUUID `json:"vendor_id"`
	StartTime  sql.NullTime  `json:"start_time"`
	EndTime    sql.NullTime  `json:"end_time"`
	IsBooked   sql.NullBool  `json:"is_booked"`
	BufferTime sql.NullInt64 `json:"buffer_time"`
}

func (q *Queries) UpdateTimeSlot(ctx context.Context, arg UpdateTimeSlotParams) (TimeSlot, error) {
	row := q.db.QueryRowContext(ctx, updateTimeSlot,
		arg.ID,
		arg.VendorID,
		arg.StartTime,
		arg.EndTime,
		arg.IsBooked,
		arg.BufferTime,
	)
	var i TimeSlot
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.StartTime,
		&i.EndTime,
		&i.IsBooked,
		&i.BufferTime,
	)
	return i, err
}
