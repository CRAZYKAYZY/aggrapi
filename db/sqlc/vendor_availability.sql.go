// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vendor_availability.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createVendorAvailability = `-- name: CreateVendorAvailability :one
INSERT INTO vendor_availability (id, vendor_id, day_of_week, date)
VALUES ($1, $2, $3, $4)
RETURNING id, vendor_id, day_of_week, date
`

type CreateVendorAvailabilityParams struct {
	ID        uuid.UUID     `json:"id"`
	VendorID  uuid.NullUUID `json:"vendor_id"`
	DayOfWeek interface{}   `json:"day_of_week"`
	Date      sql.NullTime  `json:"date"`
}

func (q *Queries) CreateVendorAvailability(ctx context.Context, arg CreateVendorAvailabilityParams) (VendorAvailability, error) {
	row := q.db.QueryRowContext(ctx, createVendorAvailability,
		arg.ID,
		arg.VendorID,
		arg.DayOfWeek,
		arg.Date,
	)
	var i VendorAvailability
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.DayOfWeek,
		&i.Date,
	)
	return i, err
}

const deleteVendorAvailability = `-- name: DeleteVendorAvailability :one
DELETE FROM vendor_availability
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteVendorAvailability(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteVendorAvailability, id)
	err := row.Scan(&id)
	return id, err
}

const getVendorAvailability = `-- name: GetVendorAvailability :one
SELECT id, vendor_id, day_of_week, date
FROM vendor_availability
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetVendorAvailability(ctx context.Context, id uuid.UUID) (VendorAvailability, error) {
	row := q.db.QueryRowContext(ctx, getVendorAvailability, id)
	var i VendorAvailability
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.DayOfWeek,
		&i.Date,
	)
	return i, err
}

const updateVendorAvailability = `-- name: UpdateVendorAvailability :one
UPDATE vendor_availability
SET vendor_id = $2,
    day_of_week = $3,
    date = $4
WHERE id = $1
RETURNING id, vendor_id, day_of_week, date
`

type UpdateVendorAvailabilityParams struct {
	ID        uuid.UUID     `json:"id"`
	VendorID  uuid.NullUUID `json:"vendor_id"`
	DayOfWeek interface{}   `json:"day_of_week"`
	Date      sql.NullTime  `json:"date"`
}

func (q *Queries) UpdateVendorAvailability(ctx context.Context, arg UpdateVendorAvailabilityParams) (VendorAvailability, error) {
	row := q.db.QueryRowContext(ctx, updateVendorAvailability,
		arg.ID,
		arg.VendorID,
		arg.DayOfWeek,
		arg.Date,
	)
	var i VendorAvailability
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.DayOfWeek,
		&i.Date,
	)
	return i, err
}
