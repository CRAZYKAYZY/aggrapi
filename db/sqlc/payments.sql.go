// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payments.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (id, appointment_id, customer_id, vendor_id, amount, payment_method, status, payment_date, transaction_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, appointment_id, customer_id, vendor_id, amount, payment_method, status, payment_date, transaction_id
`

type CreatePaymentParams struct {
	ID            uuid.UUID      `json:"id"`
	AppointmentID uuid.NullUUID  `json:"appointment_id"`
	CustomerID    uuid.NullUUID  `json:"customer_id"`
	VendorID      uuid.NullUUID  `json:"vendor_id"`
	Amount        sql.NullString `json:"amount"`
	PaymentMethod interface{}    `json:"payment_method"`
	Status        interface{}    `json:"status"`
	PaymentDate   sql.NullTime   `json:"payment_date"`
	TransactionID sql.NullString `json:"transaction_id"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.ID,
		arg.AppointmentID,
		arg.CustomerID,
		arg.VendorID,
		arg.Amount,
		arg.PaymentMethod,
		arg.Status,
		arg.PaymentDate,
		arg.TransactionID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.CustomerID,
		&i.VendorID,
		&i.Amount,
		&i.PaymentMethod,
		&i.Status,
		&i.PaymentDate,
		&i.TransactionID,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :one
DELETE FROM payments
WHERE id = $1
RETURNING id
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deletePayment, id)
	err := row.Scan(&id)
	return id, err
}

const getPayment = `-- name: GetPayment :one
SELECT id, appointment_id, customer_id, vendor_id, amount, payment_method, status, payment_date, transaction_id
FROM payments
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.CustomerID,
		&i.VendorID,
		&i.Amount,
		&i.PaymentMethod,
		&i.Status,
		&i.PaymentDate,
		&i.TransactionID,
	)
	return i, err
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments
SET appointment_id = $2,
    customer_id = $3,
    vendor_id = $4,
    amount = $5,
    payment_method = $6,
    status = $7,
    payment_date = $8,
    transaction_id = $9
WHERE id = $1
RETURNING id, appointment_id, customer_id, vendor_id, amount, payment_method, status, payment_date, transaction_id
`

type UpdatePaymentParams struct {
	ID            uuid.UUID      `json:"id"`
	AppointmentID uuid.NullUUID  `json:"appointment_id"`
	CustomerID    uuid.NullUUID  `json:"customer_id"`
	VendorID      uuid.NullUUID  `json:"vendor_id"`
	Amount        sql.NullString `json:"amount"`
	PaymentMethod interface{}    `json:"payment_method"`
	Status        interface{}    `json:"status"`
	PaymentDate   sql.NullTime   `json:"payment_date"`
	TransactionID sql.NullString `json:"transaction_id"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePayment,
		arg.ID,
		arg.AppointmentID,
		arg.CustomerID,
		arg.VendorID,
		arg.Amount,
		arg.PaymentMethod,
		arg.Status,
		arg.PaymentDate,
		arg.TransactionID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.CustomerID,
		&i.VendorID,
		&i.Amount,
		&i.PaymentMethod,
		&i.Status,
		&i.PaymentDate,
		&i.TransactionID,
	)
	return i, err
}
