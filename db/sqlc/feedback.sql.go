// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feedback.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeedback = `-- name: CreateFeedback :one
INSERT INTO feedback (id, appointment_id, rating, comment)
VALUES ($1, $2, $3, $4)
RETURNING id, appointment_id, rating, comment
`

type CreateFeedbackParams struct {
	ID            uuid.UUID      `json:"id"`
	AppointmentID uuid.NullUUID  `json:"appointment_id"`
	Rating        sql.NullInt32  `json:"rating"`
	Comment       sql.NullString `json:"comment"`
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, createFeedback,
		arg.ID,
		arg.AppointmentID,
		arg.Rating,
		arg.Comment,
	)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Rating,
		&i.Comment,
	)
	return i, err
}

const deleteFeedback = `-- name: DeleteFeedback :one
DELETE FROM feedback
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteFeedback(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedback, id)
	err := row.Scan(&id)
	return id, err
}

const getFeedback = `-- name: GetFeedback :one
SELECT id, appointment_id, rating, comment
FROM feedback
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetFeedback(ctx context.Context, id uuid.UUID) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, getFeedback, id)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Rating,
		&i.Comment,
	)
	return i, err
}

const updateFeedback = `-- name: UpdateFeedback :one
UPDATE feedback
SET appointment_id = $2,
    rating = $3,
    comment = $4
WHERE id = $1
RETURNING id, appointment_id, rating, comment
`

type UpdateFeedbackParams struct {
	ID            uuid.UUID      `json:"id"`
	AppointmentID uuid.NullUUID  `json:"appointment_id"`
	Rating        sql.NullInt32  `json:"rating"`
	Comment       sql.NullString `json:"comment"`
}

func (q *Queries) UpdateFeedback(ctx context.Context, arg UpdateFeedbackParams) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, updateFeedback,
		arg.ID,
		arg.AppointmentID,
		arg.Rating,
		arg.Comment,
	)
	var i Feedback
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Rating,
		&i.Comment,
	)
	return i, err
}
